#BlueJ class context
comment0.target=ChessModel
comment0.text=\r\n\ The\ ChessModel\ class\ is\ responsible\ for\ managing\ the\ game's\ data\ and\ state.\r\n\ It\ encapsulates\ the\ chessboard,\ the\ turn\ system,\ and\ game-specific\ logic\ like\r\n\ piece\ movement,\ initialization,\ and\ resetting\ the\ game.\ This\ class\ adheres\r\n\ to\ the\ principles\ of\ object-oriented\ design\ by\ ensuring\ single\ responsibility\r\n\ and\ encapsulation\ of\ game\ logic.\r\n
comment1.params=
comment1.target=ChessModel()
comment1.text=\r\n\ Constructor\ to\ initialize\ the\ ChessModel.\r\n\ By\ default,\ it\ initializes\ to\ Pink's\ turn.\r\n
comment10.params=color
comment10.target=boolean\ isGameOver(ChessPieces.Color)
comment10.text=\r\n\ Checks\ if\ the\ game\ is\ over\ by\ determining\ if\ a\ player's\ King\ (Sau)\ is\ still\ on\ the\ board.\r\n\ \r\n\ @param\ color\ The\ color\ of\ the\ player\ being\ checked.\r\n\ @return\ True\ if\ the\ King\ is\ no\ longer\ on\ the\ board,\ false\ otherwise.\r\n
comment11.params=
comment11.target=boolean\ isPinkTurn()
comment11.text=\r\n\ Getter\ for\ whose\ turn\ it\ is.\r\n\ \r\n\ @return\ True\ if\ it\ is\ Pink's\ turn,\ false\ if\ it\ is\ Blue's\ turn.\r\n
comment12.params=newBoard
comment12.target=void\ setChessBoard(ChessPieces[][])
comment12.text=\r\n\ Updates\ the\ chessboard\ state\ in\ the\ model.\r\n\ \r\n\ @param\ newBoard\ The\ new\ chessboard\ state\ to\ set.\r\n
comment13.params=
comment13.target=ChessPieces\ getSelectedPiece()
comment14.params=isPinkTurn
comment14.target=void\ setTurn(boolean)
comment2.params=
comment2.target=ChessPieces[][]\ getChessBoard()
comment2.text=\r\n\ Getter\ method\ to\ retrieve\ the\ current\ state\ of\ the\ chessboard.\r\n\ \r\n\ @return\ The\ 2D\ array\ representing\ the\ chessboard.\r\n
comment3.params=
comment3.target=void\ startNewGame()
comment3.text=\r\n\ Starts\ a\ new\ game\ by\ resetting\ and\ initializing\ the\ chess\ pieces.\r\n
comment4.params=
comment4.target=void\ initializePieces()
comment4.text=\r\n\ Initializes\ the\ chessboard\ with\ the\ starting\ positions\ of\ all\ pieces.\r\n\ This\ method\ ensures\ that\ each\ player's\ pieces\ are\ placed\ correctly\r\n\ on\ their\ respective\ sides\ of\ the\ board.\r\n
comment5.params=piece\ x\ y
comment5.target=void\ placePiece(ChessPieces,\ int,\ int)
comment5.text=\r\n\ Places\ a\ chess\ piece\ at\ a\ specific\ position\ on\ the\ board.\r\n\ \r\n\ @param\ piece\ The\ chess\ piece\ to\ place.\r\n\ @param\ x\ \ \ \ \ The\ x-coordinate\ on\ the\ board.\r\n\ @param\ y\ \ \ \ \ The\ y-coordinate\ on\ the\ board.\r\n
comment6.params=
comment6.target=void\ toggleTurn()
comment6.text=\r\n\ Toggles\ the\ turn\ between\ Pink\ and\ Blue\ players.\r\n
comment7.params=x\ y
comment7.target=boolean\ executeMovement(int,\ int)
comment7.text=\r\n\ Handles\ a\ player's\ move.\ This\ includes\ selecting\ a\ piece,\ validating\r\n\ the\ move,\ and\ updating\ the\ board\ if\ the\ move\ is\ valid.\r\n\ \r\n\ @param\ x\ The\ x-coordinate\ of\ the\ target\ position.\r\n\ @param\ y\ The\ y-coordinate\ of\ the\ target\ position.\r\n\ @return\ True\ if\ the\ move\ was\ successful,\ false\ otherwise.\r\n
comment8.params=
comment8.target=void\ resetGame()
comment8.text=\r\n\ Resets\ the\ game\ state,\ including\ the\ board,\ turn,\ and\ selected\ piece.\r\n
comment9.params=
comment9.target=void\ clearBoard()
numComments=15
